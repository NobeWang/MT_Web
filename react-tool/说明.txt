electron中的main主进程可以通过nodejs操作本地系统文件，但是主进程中没有window对象
react渲染页面中不能访问electron中的接口，例如const { ipcRenderer } = require("electron")等，但是页面渲染进程里面有window对象的，可以实现页面之间的数据传递，但是没有办法通过window和electron主进程进行数据交互与通信

react-router与react-router-dom的区别
react-router: 实现了路由的核心功能
react-router-dom: 基于react-router，加入了在浏览器运行环境下的一些功能，例如： Link组件，会渲染一个a标签，Link组件源码a标签行; BrowserRouter和HashRouter组件，前者使用pushState和popState事件构建路由，后者使用window.location.hash和hashchange事件构建路由
react-router-dom依赖react-router，所以我们使用npm安装依赖的时候，只需要安装相应环境下的库即可，不用再显式安装react-router。基于浏览器环境的开发，只需要安装react-router-dom

react-router-native: 基于react-router，类似react-router-dom，加入了react-native运行环境下的一些功能。


create-react-app
# 全局安装
npm install -g create-react-app
# 构建一个my-app的项目
npx create-react-app my-app
cd my-app

# 启动编译当前的React项目，并自动打开 http://localhost:3000/
npm start
├── package.json
├── public                  # 这个是webpack的配置的静态目录
│   ├── favicon.ico
│   ├── index.html          # 默认是单页面应用，这个是最终的html的基础模板
│   └── manifest.json
├── src
│   ├── App.css             # App根组件的css
│   ├── App.js              # App组件代码
│   ├── App.test.js
│   ├── index.css           # 启动文件样式
│   ├── index.js            # 启动的文件（开始执行的入口）！！！！
│   ├── logo.svg
│   └── serviceWorker.js
└── yarn.lock

HTML模板修改
在public目录中有个index.html是单页面应用的基本模板，所有react生成的代码都会注入到此HTML中。所以此处可以添加一些cdn脚本或者全局的html。

main.js就是主进程，在主进程中打开的一个web页面就是一个渲染进程，这个web页面也就是该项目中的这个index.html，并且可以直接web页面上通过nodejs的api进行系统级的交互。
如果我们没有使用react，那么没有什么问题，但是在react引入electron就会报错了。所以，要在react中使用，就需要提前将electron赋值给window.electron 以方便使用。在index.html的head中增加了一句js，如下

：
<script>global.electron = require('electron')</script>
